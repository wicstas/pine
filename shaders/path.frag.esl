#version 450 core

out vec4 out_color;
in vec2 coord;

uniform ivec2 film_size;
uniform int alpha;
layout(location = 0, rgba32f) uniform image2D image;

ivec2 frag_coord = ivec2(gl_FragCoord.xy);

const float Infinity = 1e+10;
const float OneMinusEpsilon = 1 - 1e-6f;
const float Pi = 3.14159265;

const int Primes[] = {
    2,    3,    5,    7,    11,   13,   17,   19,   23,   29,   31,   37,   41,   43,   47,   53,
    59,   61,   67,   71,   73,   79,   83,   89,   97,   101,  103,  107,  109,  113,  127,  131,
    137,  139,  149,  151,  157,  163,  167,  173,  179,  181,  191,  193,  197,  199,  211,  223,
    227,  229,  233,  239,  241,  251,  257,  263,  269,  271,  277,  281,  283,  293,  307,  311,
    313,  317,  331,  337,  347,  349,  353,  359,  367,  373,  379,  383,  389,  397,  401,  409,
    419,  421,  431,  433,  439,  443,  449,  457,  461,  463,  467,  479,  487,  491,  499,  503,
    509,  521,  523,  541,  547,  557,  563,  569,  571,  577,  587,  593,  599,  601,  607,  613,
    617,  619,  631,  641,  643,  647,  653,  659,  661,  673,  677,  683,  691,  701,  709,  719,
    727,  733,  739,  743,  751,  757,  761,  769,  773,  787,  797,  809,  811,  821,  823,  827,
    829,  839,  853,  857,  859,  863,  877,  881,  883,  887,  907,  911,  919,  929,  937,  941,
    947,  953,  967,  971,  977,  983,  991,  997,  1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049
};
int dim = 0;

float radical_inverse(int base_index, uint a) {
  int base = Primes[base_index];
  float invBase = 1.0f / base, invBaseN = 1.0f;
  uint reversedDigits = 0;
  while (a != 0) {
    uint next = a / base;
    uint digits = a - next * base;
    reversedDigits = reversedDigits * base + digits;
    invBaseN *= invBase;
    a = next;
  }

  return min(reversedDigits * invBaseN, OneMinusEpsilon);
}

layout(std430, binding = 10) buffer SSBO10 {
    int sobol_256spp_256d[256 * 256];
};
layout(std430, binding = 11) buffer SSBO11 {
    int scramblingTile[128 * 128 * 8];
};
layout(std430, binding = 12) buffer SSBO12 {
    int rankingTile[128 * 128 * 8];
};
float bluenoise(int pixel_i, int pixel_j, int sampleIndex, int sampleDimension)
{
	// wrap arguments
	pixel_i = pixel_i & 127;
	pixel_j = pixel_j & 127;
	sampleIndex = sampleIndex & 255;
	sampleDimension = sampleDimension & 255;

	// xor index based on optimized ranking
	int rankedSampleIndex = sampleIndex ^ rankingTile[(sampleDimension + (pixel_i + pixel_j*128)*8) % (128 * 128 * 8)];

	// fetch value in sequence
	int value = sobol_256spp_256d[sampleDimension + rankedSampleIndex*256];

	// If the dimension is optimized, xor sequence value based on optimized scrambling
	value = value ^ scramblingTile[(sampleDimension%8) + (pixel_i + pixel_j*128)*8];

	// convert to float and return
	float v = (0.5f+value)/256.0f;
	return v;
}

float next() { return bluenoise(frag_coord.x, frag_coord.y, alpha, dim++);}
vec2 next2() { return vec2(next(), next()); }
vec3 next3() { return vec3(next(), next(), next()); }
vec3 face_same_hemisphere(vec3 v, vec3 ref) { 
    return dot(v, ref) < 0 ? -v : v; 
}

mat3 coordinate_system(vec3 n) {
  mat3 m;
  m[2] = n;
  if (abs(n.x) > abs(n.y))
    m[0] = normalize(cross(n, vec3(0, 1, 0)));
  else
    m[0] = normalize(cross(n, vec3(1, 0, 0)));
  m[1] = cross(n, m[0]);
  return m;
}

vec2 sample_disk_concentric(vec2 u) {
  u = vec2(u.x * 2 - 1.0f, u.y * 2 - 1.0f);
  float theta, r;
  if (abs(u.x) > abs(u.y)) {
    r = u.x;
    theta = Pi / 4.0f * u.y / u.x;
  } else {
    r = u.y;
    theta = Pi / 2.0f - Pi / 4.0f * (u.x / u.y);
  }
  return r * vec2(cos(theta), sin(theta));
}

vec3 cosine_weighted_hemisphere(vec2 u) {
  vec2 d = sample_disk_concentric(u);
  float z = sqrt(max(1.0f - d.x * d.x - d.y * d.y, 0.0f));
  return vec3(d.x, d.y, z);
}

struct Ray {
    vec3 o;
    float tmin;
    vec3 d;
    float tmax;
};
Ray Ray_(vec3 o, vec3 d) {
    return Ray(o, 0, d, Infinity);
}
vec3 offset_ray_origin(vec3 p, vec3 n) {
  const float origin = 1.0f / 32.0f;
  const float float_scale = 1.0f / 65536.0f;
  const float int_scale = 256.0f;

  ivec3 of_i = ivec3(int_scale * n);
  return vec3(
          abs(p.x) < origin ? p.x + n.x * float_scale : intBitsToFloat(floatBitsToInt(p.x) + (p.x < 0 ? -of_i.x : of_i.x)),
          abs(p.y) < origin ? p.y + n.y * float_scale : intBitsToFloat(floatBitsToInt(p.y) + (p.y < 0 ? -of_i.y : of_i.y)),
          abs(p.z) < origin ? p.z + n.z * float_scale : intBitsToFloat(floatBitsToInt(p.z) + (p.z < 0 ? -of_i.z : of_i.z))
          );
}

Ray spawn_ray(vec3 p, vec3 n, vec3 wo) {
  Ray ray;
  ray.o = offset_ray_origin(p, n);
  ray.d = wo;
  ray.tmin = 0.0f;
  ray.tmax = Infinity;
  return ray;
}
struct Camera {
  vec3 position;
  mat3 c2w;
  vec2 fov2d;
};
uniform Camera cam;

Ray gen_ray(vec2 p_film) {
    vec2 pc = (p_film - vec2(0.5f)) * 2 * cam.fov2d;
    return Ray_(cam.position, normalize(cam.c2w * vec3(pc, 1.0f)));
}
struct Material {
    vec4 color;
};

struct SurfaceInteraction {
  vec3 p;
  vec3 n;
  vec2 uv;
  Material material;
};

struct Mesh {
    int n_faces;
    int face_index_offset;
    Material material;
};

uniform int n_meshes;

layout(std430, binding = 0) buffer SSBO0 {
    Mesh meshes[];
};
layout(std430, binding = 1) buffer SSBO1 {
    ivec4 faces[];
};
layout(std430, binding = 2) buffer SSBO2 {
    vec4 vertices[];
};
layout(std430, binding = 3) buffer SSBO3 {
    vec4 normals[];
};
layout(std430, binding = 4) buffer SSBO4 {
    vec2 texcoords[];
};

bool intersect(inout Ray ray, vec3 v0, vec3 v1, vec3 v2) {
  vec3 E1 = v1 - v0;
  vec3 E2 = v2 - v0;
  vec3 T = ray.o - v0;
  vec3 P = cross(ray.d, E2);
  vec3 Q = cross(T, E1);
  float D = dot(P, E1);
  if (D == 0.0f) return false;
  float t = dot(Q, E2) / D;
  if (t <= ray.tmin || t >= ray.tmax) return false;
  float u = dot(P, T) / D;
  if (u < 0.0f || u > 1.0f) return false;
  float v = dot(Q, ray.d) / D;
  if (v < 0.0f || u + v > 1.0f) return false;
  ray.tmax = t;
  return true;
}

ivec3 load_face(int i) { return ivec3(faces[i]); }
vec3 load_vertex(int i) { return vec3(vertices[i]); }
vec3 load_normal(int i) { return vec3(normals[i]); }
vec2 load_texcoord(int i) { return texcoords[i]; }

vec2 lerp(vec2 uv, vec2 a, vec2 b, vec2 c) { return (1 - uv[0] - uv[1]) * a + uv[0] * b + uv[1] * c; }
vec3 lerp(vec2 uv, vec3 a, vec3 b, vec3 c) { return (1 - uv[0] - uv[1]) * a + uv[0] * b + uv[1] * c; }

bool intersect(inout Ray ray, out SurfaceInteraction it, Mesh mesh) {
    int hit_index = -1;
    for(int i = 0; i < min(mesh.n_faces, 10); i++) {
        ivec3 face = load_face(mesh.face_index_offset + i);
        if(intersect(ray, load_vertex(face[0]), load_vertex(face[1]), load_vertex(face[2])))
            hit_index = i;
    }

    if(hit_index != -1) {
        ivec3 face = load_face(mesh.face_index_offset + hit_index);
        vec3 v0 = load_vertex(face[0]), v1 = load_vertex(face[1]), v2 = load_vertex(face[2]);
        vec3 e1 = v1 - v0;
        vec3 e2 = v2 - v0;
        vec3 p = ray.o + ray.tmax * ray.d;
        it.n = cross(e1, e2);
        mat3 tbn = inverse(mat3(e1, e2, it.n));
        it.uv = vec2(tbn * (p - v0));
        it.p = lerp(it.uv, v0, v1, v2);
        it.n = lerp(it.uv, load_normal(face[0]), load_normal(face[1]), load_normal(face[2]));
        it.uv = lerp(it.uv, load_texcoord(face[0]), load_texcoord(face[1]), load_texcoord(face[2]));
        it.material = mesh.material;

        return true;
    } else {
        return false;
    }
}

bool intersect(inout Ray ray, out SurfaceInteraction it) {
    bool hit = false;
    for(int i = 0; i < n_meshes; i++)
        if(intersect(ray, it, meshes[i]))
            hit = true;
    return hit;
}
vec3 radiance(Ray ray) {
    vec3 L = vec3(0.0f);
    vec3 beta = vec3(1.0f);

    for(int depth = 0; depth < 3; depth++) {
        SurfaceInteraction it;
        if(!intersect(ray, it)) {
            L += beta * vec3(1, 1, 1);
            break;
        }
        it.n = face_same_hemisphere(it.n, -ray.d);
        

        // SurfaceInteraction itt;
        // if(!intersect(spawn_ray(it.p, it.n, normalize(vec3(1, 1, -1))), itt))
        //     L += beta * vec3(it.material.color) * vec3(1, 1, 1) / 2;

        ray = spawn_ray(it.p, it.n, coordinate_system(it.n) * cosine_weighted_hemisphere(next2()));
        beta *= vec3(it.material.color);
    }

    return L;
}

void main() {
  vec3 L = radiance(gen_ray(coord));
  vec3 color = (imageLoad(image, frag_coord).xyz * alpha + L) / (alpha + 1);
  imageStore(image, frag_coord, vec4(color, 1.0));
  out_color = vec4(sqrt(color), 1.0);
}