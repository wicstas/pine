scene = Scene();
image_size = [640, 480];

scene.add(Plane([0, 0, 0], [0, 1, 0]), Diffuse([0.9, 0.9, 0.9]));

fn sphere(pos: vec3, rad: f32): (vec3): f32 {
    return (p: vec3): f32 {
        return length(p - pos) - rad;
    };
};

fn box(pos: vec3, size: vec3): (vec3): f32 {
    return (p: vec3): f32 {
        q = abs(p - pos) - size;
        return length(max(q, 0.0)) + min(max_value(q),0.0);
    };
};

s := sphere([-1, 1, 0], 1);
b := box([2, 1, 0], [1, 1, 1]);

sdf = (p: vec3): f32 {
    return min(s(p), b(p)) - 0.4;
};
scene.add(SDF([0, 0, 0], vec3(2), sdf), Diffuse([0.9, 0.9, 0.9]));

scene.add(DirectionalLight([2, 2, -2], vec3(2)));
scene.set(ThinLenCamera(Film(image_size), [0, 5, -10], [0, 0, 0], 0.5));

PathIntegrator(BlueSampler(16), 5).render(scene);

scene.camera.film().save("images/sdf.png");

