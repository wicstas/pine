block := { pblock* }
pblock := ; | stmt | scope-unit | function-definition
scope-unit := block
scope-unit := while 
scope-unit := for 
scope-unit := if-else-chain
while := #while ( expr ) pblock 
for := #for ( stmt expr; expr ) pblock 
if-else-chain := if else-if* else?
if := #if ( expr ) pblock 
else-if := #else #if ( expr ) pblock 
else := #else pblock
function-definition := #fun id ( params* id? ) block
stmt := declaration | expr | return-stmt | break-stmt | continue-stmt
return-stmt := #return expr;
break-stmt := #break;
continue-stmt := #continue;
declaration := #var id = expr;
p-expr := id | number | string-literal | boolean-literal | grouped | function-call | member-access | subscript
grouped := ( expr )
expr := expr-0 | - + * / % & | && || 
expr-0 := p-expr | ++p-expr | --p-expr | p-expr++ | p-expr-- | +p-expr | -p-expr | !p-expr
boolean-literal := #false | #true
vector := [ arg-comma* expr ]
function-call := id ( arg-comma* expr? )
arg-comma := expr ,
params := id ,
parameter := id ,